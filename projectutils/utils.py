from django.db import connection, reset_queries, connections
from django.conf import settings
import time
import functools

# A decorater for checking the number of database queries executed from a function call
# and the length of time to perform the whole function operation
# 
# This useful decorator was obtain from: 
# https://medium.com/better-programming/django-select-related-and-prefetch-related-f23043fd635d
# , a beginners guide on how to use select_related and prefetch_related.
def query_debugger(func):

    @functools.wraps(func)
    def inner_func(*args, **kwargs):
        reset_queries()
        # Will this decorator function on the default database
        # or the test database that's generated by Django when
        # running tests?
        USE_TEST_DB = True
        
        # Set the settings.DEBUG to True. By default, django
        # tests run with DEBUG = False to, according to the docs, 
        #
        # "This is to ensure that the observed output of your 
        # code matches what will be seen in a production setting."
        #
        # but if DEBUG if set to False, then django will not record the queries,
        # and we won't be able to make use of query_debugger!
        #
        # Therefore we should set DEBUG = True to allow
        # query_debugger to function on the test database.
        if USE_TEST_DB == True:
            settings.DEBUG = True
        
        # cache settings.DEBUG option
        debug_setting = settings.DEBUG
        
        reset_queries()

        start_queries = None
        if USE_TEST_DB == True:
            start_queries = len(connection.queries)
        else:
            start_queries = len(connection.queries)

        start = time.perf_counter()
        result = func(*args, **kwargs)
        end = time.perf_counter()
        
        end_queries = None
        if USE_TEST_DB:
            end_queries = len(connection.queries)
        else:
            end_queries = len(connection.queries)

        print(f"Function : {func.__name__}")
        print(f"Number of Queries : {end_queries - start_queries}")
        print(f"Finished in : {(end - start):.2f}s")

        # Reset DEBUG setting to what it was
        settings.DEBUG = debug_setting

        return result
        

    return inner_func
